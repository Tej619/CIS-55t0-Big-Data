"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tRj0fq9GHhJkmQc_kQl-nGGdyqrnFJs4

To install Pyspark on collab.
"""

!pip install pyspark

"""I was getting error with wget so instead I used gdown libraby to download file from my google drive."""

import gdown

google_drive_link = "https://drive.google.com/file/d/1pIrdanDpJVX3-G7kQfXBNRkjUGzGGFf0/view?usp=drive_link"
output_path = "Sample.txt"

gdown.download(google_drive_link, output_path, quiet=False, fuzzy=True)
print("File downloaded successfully \n")

"""Download the pyspark library and start spark Session."""

from pyspark import SparkContext, SparkConf
from pyspark.sql import SparkSession

# conf = SparkConf().setAppName("sixWordCount")
# sc = SparkContext(conf=conf)

sqlContext = SparkSession.builder \
    .master("local[*]") \
    .appName("Colab") \
    .config('spark.ui.port', '4050') \
    .getOrCreate()

sc = sqlContext.sparkContext

inputFile = output_path

rdd = sc.textFile(inputFile)

"""Used the regular expression to remove the puncutations"""

import re

def six_word_sequence(line):
    words = re.findall(r'\b\w+\b', line.lower())

    sequence = []
    for i in range(len(words) - 5):
        six_word_seq = ' '.join(words[i:i+6])
        sequence.append(six_word_seq)

    return sequence

six_word_lines = rdd.flatMap(six_word_sequence)

count = six_word_lines \
    .map(lambda seq: (seq, 1)) \
    .reduceByKey(lambda a, b: a + b)

"""To sort the maximum occurance of 6 words sequence I used it as descending."""

sorted_counts = count.sortBy(lambda x: x[1], ascending=False)

output = "six_word_lines.txt"

sorted_counts.map(lambda x: f"{x[0]} | count: {x[1]}") \
    .saveAsTextFile(output)

print("To check top 20 lines \n --------");

top_20 = sorted_counts.take(20)
#Did not use collect() to avoid memory leaks.
for sequence, count in top_20:
    print(f"{sequence} | Count: {count}")

sqlContext.stop()

"""If you want to re run the code again run the block below."""

# import shutil
# import os

# if os.path.exists(output):
#     shutil.rmtree(output)
#     print(f"To Remove the existing output directory if code need to rerun")